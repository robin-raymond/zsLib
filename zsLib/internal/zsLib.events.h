// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>
#ifdef _WIN32

#include "zsLib.events_win.h"

#else

#include <zsLib/eventing/Log.h>
#include <stdint.h>

namespace zsLib {
  namespace eventing {

    template <typename TWriteType>
    void eventWriteBuffer(BYTE * &p, TWriteType value)
    {
      memcpy(&p, &value, sizeof(value));
      p += sizeof(value);
    }
    inline void eventWriteBuffer(BYTE ** &p, const BYTE *buffer, size_t * &bufferSizes, size_t size)
    {
      (*p) = const_cast<BYTE *>(buffer);
      (*bufferSizes) = size;
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(BYTE ** &p, const char *str, size_t * &bufferSizes)
    {
      (*p) = const_cast<BYTE *>(reinterpret_cast<const BYTE *>(str));
      (*bufferSizes) = (NULL == str ? 0 : strlen(str)) * sizeof(char);
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(const BYTE ** &p, const wchar_t *str, size_t * &bufferSizes)
    {
      (*p) = reinterpret_cast<const BYTE *>(str);
      (*bufferSizes) = (NULL == str ? 0 : wcslen(str)) * sizeof(wchar_t);
      ++p;
      ++bufferSizes;
    }


    inline uintptr_t &getEventHandlezsLib()
    {
      static uintptr_t gHandle {};
      return gHandle;
    }

#define ZS_INTERNAL_REGISTER_EVENTING_zsLib() ZS_EVENTING_REGISTER_EVENT_WRITER(zsLib::eventing::getEventHandlezsLib(), "180fc32e-8acd-43ff-82e7-ea06d0c5eb7f", "zsLib", "5b6e505401fea52757ce75cbcd88e915e18df25994d17b24efe11e090c47f92d")
#define ZS_INTERNAL_UNREGISTER_EVENTING_zsLib() ZS_EVENTING_UNREGISTER_EVENT_WRITER(zsLib::eventing::getEventHandlezsLib())


#define ZS_INTERNAL_EVENTING_EVENT_ExceptionEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_SUBSYSTEM_LOGGING(xSubsystem, Basic)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Error, Basic, (xSubsystem).getName(), __func__, __LINE__, 1000, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1001, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1002, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_MessageQueuePost(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1003, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueProcess(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1004, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueTotalUnprocessedMessages(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1005, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketAccept(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1006, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketAdopt(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1007, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketBind(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1008, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketClose(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1009, &(xxOutputBuffer[0]), 12); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketConnect(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1010, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[40]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1011, &(xxOutputBuffer[0]), 40); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketError(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Error, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1012, &(xxOutputBuffer[0]), 12); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketExceptionEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Error, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1013, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketExceptionReset(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Error, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1014, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketGetLocalAddress(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1015, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketGetOptionFlag(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1016, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketGetOptionValue(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1017, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketGetOptions(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1018, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketGetRemoteAddress(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1019, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketListen(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1020, &(xxOutputBuffer[0]), 12); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketOrphan(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1021, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketReadReadyEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1022, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketReadReadyReset(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1023, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketRecv(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1024, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketRecvFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxPIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1025, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketSend(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1026, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketSendTo(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue6), xxPIndirectSize, (xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1027, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketSetOption(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1028, &(xxOutputBuffer[0]), 20, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketSetOptionFlag(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[21]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1029, &(xxOutputBuffer[0]), 21); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketShutdown(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[20]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int32_t>(xxPOutputBuffer, static_cast<int32_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1030, &(xxOutputBuffer[0]), 20); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketWouldBlock(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1031, &(xxOutputBuffer[0]), 9); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketWriteReadyEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uintptr_t>(xxPOutputBuffer, reinterpret_cast<uintptr_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1032, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_SocketWriteReadyReset(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1033, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_TimerCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[17]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1034, &(xxOutputBuffer[0]), 17); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_TimerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1035, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_TimerEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandlezsLib(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1036, &(xxOutputBuffer[0]), 8); \
  }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

