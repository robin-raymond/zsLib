// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>

#ifndef _WIN32

#include "zsLib.events.h"

#else

#include "zsLib.events_win_etw.h"
#include <stdint.h>
#include <zsLib/eventing/Log.h>

namespace zsLib {
  namespace eventing {

#define ZS_INTERNAL_REGISTER_EVENTING_zsLib() EventRegisterzsLib()
#define ZS_INTERNAL_UNREGISTER_EVENTING_zsLib() EventUnregisterzsLib()

#define ZS_INTERNAL_EVENTING_EVENT_ExceptionEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_SUBSYSTEM_LOGGING(xSubsystem, Basic)) { EventWriteExceptionEvent((xSubsystem).getName(), __func__, __LINE__, (xValue1), (xValue2), (xValue3), static_cast<uint64_t>(xValue4), (xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueCreate(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteMessageQueueCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteMessageQueueDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_MessageQueuePost(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteMessageQueuePost((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueProcess(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteMessageQueueProcess((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_MessageQueueTotalUnprocessedMessages(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteMessageQueueTotalUnprocessedMessages((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketAccept(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketAccept((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketAdopt(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketAdopt((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketBind(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketBind((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketClose(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketClose((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketConnect(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketConnect((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSocketCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketError(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSocketError((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketExceptionEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteSocketExceptionEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketExceptionReset(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteSocketExceptionReset((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketGetLocalAddress(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketGetLocalAddress((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketGetOptionFlag(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketGetOptionFlag((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<int32_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketGetOptionValue(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketGetOptionValue((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<int32_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketGetOptions(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketGetOptions((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<int32_t>(xValue3), static_cast<int32_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketGetRemoteAddress(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketGetRemoteAddress((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketListen(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteSocketListen((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketOrphan(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketOrphan((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketReadReadyEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteSocketReadReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketReadReadyReset(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteSocketReadReadyReset((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketRecv(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSocketRecv((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketRecvFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSocketRecvFrom((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4), static_cast<size_t>(xValue7), reinterpret_cast<const BYTE *>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketSend(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSocketSend((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketSendTo(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSocketSendTo((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4), static_cast<size_t>(xValue7), reinterpret_cast<const BYTE *>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketSetOption(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketSetOption((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<int32_t>(xValue3), static_cast<int32_t>(xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketSetOptionFlag(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketSetOptionFlag((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<uint64_t>(xValue3), (bool)(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketShutdown(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteSocketShutdown((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int32_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketWouldBlock(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteSocketWouldBlock((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (bool)(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketWriteReadyEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteSocketWriteReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, reinterpret_cast<const void *>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_SocketWriteReadyReset(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteSocketWriteReadyReset((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_TimerCreate(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteTimerCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (bool)(xValue2), static_cast<int64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_TimerDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteTimerDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_TimerEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

